// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  role      String
  status    String
  created   DateTime @default(now())
  lastLogin DateTime
  passwordHash String
  messages  Message[]
  assignedMessages Message[] @relation("Assignee")
  workflows Workflow[]
}

model Company {
  id          Int      @id @default(autoincrement())
  name        String
  industry    String
  size        String   // small, medium, large, enterprise
  country     String
  website     String?
  description String?
  logo        String?
  status      String   @default("active") // active, inactive
  created     DateTime @default(now())
  updated     DateTime @updatedAt

  administrations Administration[]
  workflows       Workflow[]
}

model Administration {
  id                  Int           @id @default(autoincrement())
  accountingOffice    String
  administrationName  String
  schedule            String
  days                String[]      // Array of days or numbers as string
  status              String
  created             DateTime      @default(now())
  lastModified        DateTime      @default(now())
  companyId           Int?
  company             Company?      @relation(fields: [companyId], references: [id])

  instructions        Instruction[]
  messages            Message[]
}

model Instruction {
  id               Int             @id @default(autoincrement())
  content          String
  administrationId Int?
  status           String          @default("Open")
  administration   Administration?  @relation(fields: [administrationId], references: [id])
  createdAt        DateTime        @default(now())
}

model Message {
  id               Int      @id @default(autoincrement())
  type             String
  status           String
  administrationId Int?
  invoiceNumber    String?
  fields           String?
  message          String
  assigneeId       Int?     // <-- Foreign key to User
  created          DateTime @default(now())
  userId           Int?

  administration   Administration? @relation(fields: [administrationId], references: [id])
  user             User?           @relation(fields: [userId], references: [id])
  assignee         User?           @relation("Assignee", fields: [assigneeId], references: [id])
}

model Workflow {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  trigger     String   // email, schedule, form, manual, webhook
  schedule    String?  // daily, weekly, monthly (for scheduled workflows)
  status      String   @default("draft") // active, paused, draft
  lastRun     DateTime?
  executions  Int      @default(0)
  created     DateTime @default(now())
  updated     DateTime @updatedAt
  companyId   Int?
  company     Company? @relation(fields: [companyId], references: [id])
  userId      Int      // Creator/owner of the workflow
  user        User     @relation(fields: [userId], references: [id])

  steps       WorkflowStep[]
}

model WorkflowStep {
  id          Int      @id @default(autoincrement())
  workflowId  Int
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  stepOrder   Int      // Order of execution
  stepType    String   // action, condition, integration
  name        String
  description String?
  config      Json     // Configuration data for the step
  created     DateTime @default(now())
}